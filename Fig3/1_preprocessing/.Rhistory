logF= "all_trees_rho_origin_fixTrainTrees_nn_1scarringRate_combined.log"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
posterior_fixTestTrees = read.csv(file = paste0(dir, logF), header = T)
View(posterior_fixTestTrees)
posterior_fixTestTrees = read.delim(file = paste0(dir, logF), header = T)
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI/"
logF="all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI_combined.log"
load(file = paste0(dir, "statistics.Rdat"))
posterior_priorScarringRate = read.delim(file = paste0(dir, logF), header = T)
median(posterior_fixTestTrees$scarringRate.2)
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI/"
load(file = paste0(dir, "statistics.Rdat"))
logF="all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI_combined.log"
posterior_priorScarringRate = read.delim(file = paste0(dir, logF), header = T)
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
median(posterior_fixTestTrees$clockRate)
median(posterior_priorScarringRate$clockRate.c)
median(posterior_fixTestTrees$clockRate)
median(posterior_priorScarringRate$clockRate.c)
posterior_fixTestTrees_10scarringRates = read.delim(file = paste0(dir, logF), header = T)
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_fixTrainTrees/"
load(file = paste0(dir, "statistics.Rdat"))
logF= "all_trees_rho_origin_fixTrainTrees_nn_combined.log"
posterior_fixTestTrees_10scarringRates = read.delim(file = paste0(dir, logF), header = T)
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
median(posterior_fixTestTrees_10scarringRates$clockRate)
median(posterior_fixTestTrees_10scarringRates$clockRate)
median(posterior_fixTestTrees$clockRate)
median(posterior_priorScarringRate$clockRate.c)
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_1.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_1.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_1.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_1.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_2.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_2.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_3.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_3.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_4.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_4.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_5.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_5.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_6.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_6.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_7.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_7.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_8.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_8.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_8.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_8.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_9.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_9.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_10.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_10.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_9.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_9.2, c(0.05, 0.5, 0.95))
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_fixClock/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
5.5 /54
5.54
54/54
5/54
library(fitdistrplus)
library(boot)
allbarcodesFile = "~/Projects/trees-in-devBio/data/intMemoirData/Figure 2I/allBarcodes.csv"
allbarcodes = read.csv(allbarcodesFile)
5/54
5/54/10
5/54/10
library(ape)
library(ggplot2)
library(reshape2)
# get posterior
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/"
subdirs = c("all_trees_rho_origin_reparScarClock_clockPerTree/",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior/",
"all_trees_rho_origin_reparScarClock_relaxedClockPerTree_independentPrior/",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior_independentBD/",
"all_trees_rho_origin_reparScarClock_independentTrees/",
"all_trees_rho_origin_reparScarClock_independentTrees_independentScarringRates/",
"all_trees_rho_origin_reparScarClock_fixTrainTrees/",
"all_trees_rho_origin_reparScarClock_fixTrainTrees/",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock/",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate/",
"all_trees_rho_origin_reparScarClock_treeInit25_fixScarringRates/",
"all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI/")
#_originVaries/"
logFiles = c("all_trees_rho_origin_reparScarClock_clockPerTree_combined.log",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior_M-5S1_combined.log",
"all_trees_rho_origin_reparScarClock_relaxedClockPerTree_independentPrior_M-5S1_combined.log",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior_independentBD_combined.log",
"all_trees_rho_origin_reparScarClock_independentTrees_combined.log",
"all_trees_rho_origin_reparScarClock_independentTrees_independentScarringRates_combined.log",
"all_trees_rho_origin_fixTrainTrees_nn_combined.log",
"all_trees_rho_origin_fixTrainTrees_nn_1scarringRate_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_fixScarringRatesS_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI_combined.log")
analysisNr = 10
subdirs[analysisNr]
analysisNr = 9
subdirs[analysisNr]
posterior = read.csv(paste0(dir, subdirs[analysisNr], logFiles[analysisNr]), sep = "\t")
# get true trees
trueTreeDir =  "~/Projects/trees-in-devBio/results/intMemoir/trueTrees/trueTreesCenteredNodeHeights/manualCorrection/"
trueTreeFiles = list.files(trueTreeDir, pattern = "data.newick")
n = length(trueTreeFiles)
#get preprocessed data
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/merged_input_to_xml.Rdat")
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/treeDat.Rdat")
digitsToRound = 2
# create summary statistics
statistics = data.frame(trueHeight = rep(0, n), HPD_lower = rep(0,n), median = rep(0,n),
HPD_upper = rep(0,n), recovered = rep(F,n), colony=rep("", n),
clockLower=rep(0.0,n), medClock = rep(0.0,n), clockUpper=rep(0.0,n))
for (i in 1:n){
#get true height
trueTreeFile = trueTreeFiles[i]
trueTree = read.tree(paste0(trueTreeDir, trueTreeFile))
trueHeight = round(max(node.depth.edgelength(trueTree)), digits = digitsToRound)
#get inferred height
dataName = strsplit(x = trueTreeFile, split = ".", fixed = T)[[1]][1]
statistics[i, "colony"] = dataName
colName = paste0("treeHeight.t_", dataName, ".txt")
treeHeightPosterior = posterior[, colName]
treeHeightHPD95  = round(quantile(treeHeightPosterior, c(0.05, 0.5, 0.95)), digits = digitsToRound)
#save in summary data frame
statistics[i, 1:4 ] = c(trueHeight, treeHeightHPD95)
if (trueHeight <= treeHeightHPD95[3] & trueHeight >= treeHeightHPD95[1]){
statistics[i, "recovered"] = T
}
#add clock rate
#colName = paste0("clockRate_", dataName, ".txt")
#clockPosterior = posterior[, colName]
#clockHPD = quantile(clockPosterior, c(0.05, 0.5, 0.95))
#statistics[i, c("clockLower", "medClock", "clockUpper" )] = clockHPD
}
print(sum(statistics$recovered)/nrow(statistics))
statistics = statistics[order(statistics$trueHeight), ]
statistics$treeNumber = 1:93
# rm stats for train set
testSet = statistics[which(statistics$trueHeight != statistics$HPD_upper), ]
print(sum(testSet$recovered)/nrow(testSet))
save(statistics, file = paste0(dir, subdirs[analysisNr], "statistics.Rdat"))
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_fixClock/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
plot_posterior(mergedStats = mergedStats, "darkgreen")
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/treeDat.Rdat")
library(reshape2)
plot_posterior = function(mergedStats, colName="darkgreen"){
darkgreen="darkgreen"
melted = melt(mergedStats, id.vars = "treeNumber")
g = ggplot(mergedStats, aes(x=treeNumber, y=median)) +
geom_point()+
geom_errorbar(aes(ymin=HPD_lower, ymax=HPD_upper), alpha=0.4) +
geom_point(aes_string(y="trueHeight", col=colName))+ theme_minimal()+
xlab("tree number") + ylab("Posterior intervals of the tree height")+
ylim(0,55)+
scale_x_discrete("colonies", labels  = statistics$colony_id)+
scale_color_brewer(type = "div")+
theme(axis.text.x = element_text(angle = 45))
return(g)
}
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_originVaries/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
mergedStats$diffSlope = mergedStats$lmSlope - 0.009
mergedStats$diffHeight = mergedStats$trueHeight - mergedStats$median
mergedStats = mergedStats[order(mergedStats$diffHeight), ]
mergedStats$treeNumber = 1:93
clockPrior1 = rlnorm(n = 10000, meanlog = -5, sdlog = 1)
clock1HPD = quantile(clockPrior1, c(0.05, 0.5, 0.95))
clockPrior2 = rlnorm(n = 10000, meanlog = -5, sdlog = 4)
clock2HPD = quantile(clockPrior2, c(0.05, 0.5, 0.95))
mergedStats[94, ] = list("prior1clock", NA, NA, NA, NA, NA, clock1HPD[1], clock1HPD[2], clock1HPD[3], 94, NA, NA, NA, NA, NA, NA, NA, NA,NA)
mergedStats[95, ] = list("prior1clockPerTree", NA, NA, NA, NA, NA, clock2HPD[1], clock2HPD[2], clock2HPD[3], 94, NA, NA, NA, NA, NA, NA, NA, NA,NA)
plot_posterior(mergedStats, "diffSlope")
mergedStats = mergedStats[order(mergedStats$diffSlope), ]
mergedStats$treeNumber = 1:95
plot_posterior(mergedStats, "diffHeight")
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_fixClock/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
0.009 + 0.09
(0.009 + 0.09)/2
View(mergedStats)
ggplot(mergedStats$lmSlope, mergedStats$trueHeight)
ggplot(aes(mergedStats$lmSlope, mergedStats$trueHeight))
ggplot(mergedStats, aes(x=lmSlope, y=trueHeight))
ggplot(mergedStats, aes(x=lmSlope, y=trueHeight))+
geom_point()
cor_lm_height = cor(mergedStats$trueHeight, mergedStats$lmSlope)
cor_lm_height
cor_lm_height = cor(mergedStats$trueHeight, mergedStats$lmSlope)
ggplot(mergedStats, aes(x=lmSlope, y=trueHeight))+
geom_point()
View(mergedStats)
ggplot(mergedStats, aes(x=median, y=dist))+
geom_point()
cor_height = cor(mergedStats$median, mergedStats$dist)
ggplot(mergedStats, aes(x=median, y=dist))+
geom_point()
library(ggplot)
library(ggplot2)
ggplot(mergedStats, aes(x=median, y=dist))+
geom_point()
ggplot(mergedStats, aes(x=median, y=dist))+
geom_point()+
ggtitle(label = "o", subtitle = paste(round(cor_height, digits = 2)))
cor_height = cor(mergedStats$treeHeight, mergedStats$dist)
ggplot(mergedStats, aes(x=treeHeight, y=dist))+
geom_point()+
ggtitle(label = "o", subtitle = paste(round(cor_height, digits = 2)))
?treedist
??treedist
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
plot_posterior(mergedStats = mergedStats, "darkgreen")
library(reshape2)
plot_posterior(mergedStats = mergedStats, "darkgreen")
library(phangorn)
library(ape)
library(ggplot2)
library(reshape2)
# get posterior
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/"
subdirs = c("all_trees_rho_origin_reparScarClock_clockPerTree/",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior/",
"all_trees_rho_origin_reparScarClock_relaxedClockPerTree_independentPrior/",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior_independentBD/",
"all_trees_rho_origin_reparScarClock_independentTrees/",
"all_trees_rho_origin_reparScarClock_independentTrees_independentScarringRates/",
"all_trees_rho_origin_reparScarClock_fixTrainTrees/",
"all_trees_rho_origin_reparScarClock_fixTrainTrees/",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock/",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate/",
"all_trees_rho_origin_reparScarClock_treeInit25_fixScarringRates/",
"all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI/")
#_originVaries/"
logFiles = c("all_trees_rho_origin_reparScarClock_clockPerTree_combined.log",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior_M-5S1_combined.log",
"all_trees_rho_origin_reparScarClock_relaxedClockPerTree_independentPrior_M-5S1_combined.log",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior_independentBD_combined.log",
"all_trees_rho_origin_reparScarClock_independentTrees_combined.log",
"all_trees_rho_origin_reparScarClock_independentTrees_independentScarringRates_combined.log",
"all_trees_rho_origin_fixTrainTrees_nn_combined.log",
"all_trees_rho_origin_fixTrainTrees_nn_1scarringRate_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_fixScarringRatesS_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI_combined.log")
analysisNr = 10
posterior = read.csv(paste0(dir, subdirs[analysisNr], logFiles[analysisNr]), sep = "\t")
# get true trees
trueTreeDir =  "~/Projects/trees-in-devBio/results/intMemoir/trueTrees/trueTreesCenteredNodeHeights/manualCorrection/"
trueTreeFiles = list.files(trueTreeDir, pattern = "data.newick")
n = length(trueTreeFiles)
#get preprocessed data
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/merged_input_to_xml.Rdat")
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/treeDat.Rdat")
digitsToRound = 2
# create summary statistics
statistics = data.frame(trueHeight = rep(0, n), HPD_lower = rep(0,n), median = rep(0,n),
HPD_upper = rep(0,n), recovered = rep(F,n), colony=rep("", n),
clockLower=rep(0.0,n), medClock = rep(0.0,n), clockUpper=rep(0.0,n))
for (i in 1:n){
#get true height
trueTreeFile = trueTreeFiles[i]
trueTree = read.tree(paste0(trueTreeDir, trueTreeFile))
trueHeight = round(max(node.depth.edgelength(trueTree)), digits = digitsToRound)
#get inferred height
dataName = strsplit(x = trueTreeFile, split = ".", fixed = T)[[1]][1]
statistics[i, "colony"] = dataName
colName = paste0("treeHeight.t_", dataName, ".txt")
treeHeightPosterior = posterior[, colName]
treeHeightHPD95  = round(quantile(treeHeightPosterior, c(0.05, 0.5, 0.95)), digits = digitsToRound)
#save in summary data frame
statistics[i, 1:4 ] = c(trueHeight, treeHeightHPD95)
if (trueHeight <= treeHeightHPD95[3] & trueHeight >= treeHeightHPD95[1]){
statistics[i, "recovered"] = T
}
#add clock rate
#colName = paste0("clockRate_", dataName, ".txt")
#clockPosterior = posterior[, colName]
#clockHPD = quantile(clockPosterior, c(0.05, 0.5, 0.95))
#statistics[i, c("clockLower", "medClock", "clockUpper" )] = clockHPD
}
print(sum(statistics$recovered)/nrow(statistics))
statistics = statistics[order(statistics$trueHeight), ]
statistics$treeNumber = 1:93
# rm stats for train set
testSet = statistics[which(statistics$trueHeight != statistics$HPD_upper), ]
print(sum(testSet$recovered)/nrow(testSet))
save(statistics, file = paste0(dir, subdirs[analysisNr], "statistics.Rdat"))
library(ggridges)
library(ggplot2)
library(reshape2)
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/branchDat_trueTrees.Rdat")
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/treeDat.Rdat")
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/alignmentDat_trueTrees.Rdat")
plotDir = "~/Projects/trees-in-devBio/results/intMemoir/plots/temporalSignal"
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/treeDat.Rdat")
library(reshape2)
plot_posterior = function(mergedStats, colName="darkgreen"){
darkgreen="darkgreen"
melted = melt(mergedStats, id.vars = "treeNumber")
g = ggplot(mergedStats, aes(x=treeNumber, y=median)) +
geom_point()+
geom_errorbar(aes(ymin=HPD_lower, ymax=HPD_upper), alpha=0.4) +
geom_point(aes_string(y="trueHeight", col=colName))+ theme_minimal()+
xlab("tree number") + ylab("Posterior intervals of the tree height")+
ylim(0,55)+
scale_x_discrete("colonies", labels  = statistics$colony_id)+
scale_color_brewer(type = "div")+
theme(axis.text.x = element_text(angle = 45))
return(g)
}
library(ggplot2)
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
print(sum(statistics$recovered)/nrow(statistics))
statistics = statistics[order(statistics$trueHeight), ]
statistics$treeNumber = 1:93
# rm stats for train set
testSet = statistics[which(statistics$trueHeight != statistics$HPD_upper), ]
print(sum(testSet$recovered)/nrow(testSet))
setwd("../../../trees-in-devBio/papers/bayesianPhylogeneticInference/Figures/Supp/intMEMOIR/scripts/")
library(treeman)
library(stringr)
tipTime = 54
ndLabels = function(nd){
id = nd[['id']]
return(id)
}
set_tip_states = function(tree, alignment){
#sort tip ids by their numeric meaning
ids = as.character(sort(as.numeric(tree['tips'])))
# set tip states
newTree = setNdsOther(tree = tree, ids = ids, vals = alignment$state, slt_nm = "state" )
newTree = updateSlts(newTree)
return(newTree)
}
calc_internal_node_state = function(state_child1, state_child2){
if(is.na(state_child1)){
stop("State of child 1 is NA")
}
if(is.na(state_child2)){
stop("State of child 1 is NA")
}
nrDiffs = adist(state_child1, state_child2)[1,1]
if(nrDiffs > 0){
differences = as.data.frame(strsplit(c(state_child1, state_child2), split = ""), col.names = c("state1", "state2"))
differences$newState = differences$state1
differences$identical =  differences$state1 == differences$state2
# Where a character differs between the child states, set the parent state to 1 (unedited)
differences[which(!differences$identical), "newState"] = 1
state = paste0(differences$newState, collapse = "")
# calc difference for each child to parent state
nrDiffs_child1 = adist(state_child1, state)[1,1]
nrDiffs_child2 = adist(state_child2, state)[1,1]
return(list(state, nrDiffs_child1, nrDiffs_child2))
}else{
return(list(state_child1, 0, 0))
}
}
add_forward_time_to_parent = function(tree, node){
branchLengthToParent  = node['spn']
if (node['tip']){
forwardTime = tipTime - branchLengthToParent
}else{
nodeTime = getNdSlt(tree = tree, slt_nm = "forwardTime", id = node['id'])
forwardTime = nodeTime - branchLengthToParent
}
parent = node['prid']
tree = setNdOther(tree, parent, slt_nm = "forwardTime", val = forwardTime)
tree = updateSlts(tree)
return(tree)
}
calc_edits_root_to_origin = function(rootState){
origin_state = "1111111111"
nrDiffs = adist(rootState, origin_state)[1,1]
return(nrDiffs)
}
traverse_postorder = function(tree, node){
if(!node['tip']){
print(node)
children = node['ptid']
child1 = tree[[children[1]]]
child2 = tree[[children[2]]]
tree = traverse_postorder(tree, child1)
tree = traverse_postorder(tree, child2)
# get children with updated node slots
child1 = tree[[children[1]]]
child2 = tree[[children[2]]]
state1 = getNdSlt(tree = tree, slt_nm = "state", id = child1['id'])
state2 = getNdSlt(tree = tree, slt_nm = "state", id = child2['id'])
result = calc_internal_node_state(state1, state2)
# set number of edits to branches toward children nodes
tree = setNdOther(tree, node['id'], slt_nm = "state", val = result[[1]])
tree = updateSlts(tree)
tree = setNdOther(tree, node['ptid'][1], slt_nm = "nEdits", val = result[[2]])
tree = updateSlts(tree)
tree = setNdOther(tree, node['ptid'][2], slt_nm = "nEdits", val = result[[3]])
tree = updateSlts(tree)
#set forward time
tree = add_forward_time_to_parent(tree = tree, node = node)
# add number of edits to branch from origin to root
if (node['root']){
nEdits = calc_edits_root_to_origin(result[[1]])
tree = setNdOther(tree, node['id'], slt_nm = "nEdits", val = nEdits)
tree = updateSlts(tree)
}
}else{
tree = setNdOther(tree, node['id'], slt_nm = "forwardTime", val = tipTime)
tree = updateSlts(tree)
tree = add_forward_time_to_parent(tree = tree, node = node)
}
return(tree)
}
getwd()
setwd("../../intMEMOIR/../../Fig3/1_preprocessing/")
merged = readRDS(file = "correctedMergedInput.Rds")
fileDir = "../dat/correctedFilteredData/"
trueTreeDir = "../dat/trueTrees/trueTreesCenteredNodeHeights/manualCorrection/"
trueTreeFiles = list.files(trueTreeDir)
files = list.files(fileDir)
file=files[1]
n = nrow(merged)
dat = data.frame(colony = rep("",n), treeHeight=rep(0,n), treeLength=0, medEdits=rep(0,n), dist=rep(0,n), maxDist=0)
dat = data.frame(colony = rep("",n), treeHeight=rep(0,n), treeLength=0, medEdits=rep(0,n), dist=rep(0,n), maxDist=0)
branchDat = data.frame(colony = rep("", n*60), nodeId = 0, branchLength =0, nEdits=0, nodeTime = 0, branchStartTime=0, editsUntilNode=0)
alignmentDat = data.frame(colony = rep("", n*60), cellID=0, state="", n0=0, n1=0, n2=0)
#intNodeDat = data.frame(colony=rep("", n*60), cellID=0, )
branchDatCtr = 1
alignmentDatCtr = 1
for (i in 1:n){
colony =merged[i, "colony_id"]
#get alignment for colony
file = paste0(colony, ".txt")
filePath = paste(fileDir, file, sep = "")
alignment = read.csv(filePath, sep = "", colClasses = "character")
nCells = nrow(alignment)
alignment$cellNr = 1:nCells
#get true tree for colony
treeFile =  paste0(colony, ".newick")
tree = readTree(file = paste0(trueTreeDir, treeFile))
#time and edits -> cor tree height and #edits
dat[i, "colony"] = colony
dat[i, "treeHeight"] = tree['age']
alignment$n0 = str_count(string = alignment[, "state"], pattern = "0")
alignment$n1 = str_count(string = alignment[, "state"], pattern = "1")
alignment$n2 = str_count(string = alignment[, "state"], pattern = "2")
alignmentDat[alignmentDatCtr : (alignmentDatCtr + nCells - 1), "colony"] = colony
alignmentDat[alignmentDatCtr : (alignmentDatCtr + nCells - 1), "state"] = alignment[, "state"]
alignmentDat[alignmentDatCtr : (alignmentDatCtr + nCells - 1), "n0"] = alignment[, "n0"]
alignmentDat[alignmentDatCtr : (alignmentDatCtr + nCells - 1), "n1"] = alignment[, "n1"]
alignmentDat[alignmentDatCtr : (alignmentDatCtr + nCells - 1), "n2"] = alignment[, "n2"]
alignmentDat[alignmentDatCtr : (alignmentDatCtr + nCells - 1), "cellID"] = alignment[, "cellNr"]
alignmentDatCtr = alignmentDatCtr + nCells
dat[i, "medEdits"] = mean(alignment$n2 + alignment$n0)
# get intra manhattan distance
stateMatrix = t(data.frame(strsplit(alignment[, "state"], "")))
rownames(stateMatrix) = c(paste0("cell", 1:nCells))
distMatrix = dist(stateMatrix, method = "manhattan")
dat[i, "dist"] = sum(distMatrix)/ (nCells * (nCells-1) / 2)
dat[i, "maxDist"] = max(distMatrix)
# do ancestral state reconstruction
newTree = set_tip_states(tree = tree, alignment = alignment)
root =  newTree[[newTree['root']]]
newTree = traverse_postorder(tree = newTree, node = root)
#collect branches
ndIds = c(newTree['nds'], newTree['tips'])
editsOnBranch = getNdsSlt(tree = newTree, ids = ndIds, slt_nm = "nEdits")
nodeStates = getNdsSlt(tree = newTree, ids = ndIds, slt_nm = "state")
editsUntilNode = sapply(nodeStates, FUN = function(x){calc_edits_root_to_origin(x)})
branches = getNdsSlt(tree = newTree, ids = ndIds, slt_nm = "spn")
forwardTimes = getNdsSlt(tree = newTree, ids = ndIds, slt_nm = "forwardTime")
branchDat[branchDatCtr: (branchDatCtr + length(editsOnBranch) -1), "branchLength"] = branches
branchDat[branchDatCtr: (branchDatCtr + length(editsOnBranch) -1), "nEdits"] = editsOnBranch
branchDat[branchDatCtr: (branchDatCtr + length(editsOnBranch) -1), "editsUntilNode"] = editsUntilNode
branchDat[branchDatCtr: (branchDatCtr + length(editsOnBranch) -1), "nodeTime"] = forwardTimes
branchDat[branchDatCtr: (branchDatCtr + length(editsOnBranch) -1), "nodeId"] =  ndIds
branchDat[branchDatCtr: (branchDatCtr + length(editsOnBranch) -1), "colony"] = colony
branchDatCtr = branchDatCtr + length(editsOnBranch)
dat[i, "treeLength"] = sum(branches)
}
branchDat = branchDat[which(branchDat$colony!=""), ]
branchDat$branchStartTime = branchDat$nodeTime - branchDat$branchLength
alignmentDat = alignmentDat[which(alignmentDat$state != ""), ]
alignmentDat$nEdits = alignmentDat$n0 + alignmentDat$n2
dat$nCells = merged$n.cells
dat$nSampledCells = merged$n_cells
save(alignmentDat, file = "alignmentDat_trueTrees.Rdat")
save(branchDat, file = "branchDat_trueTrees.Rdat")
save(dat, file = "treeDat.Rdat")
