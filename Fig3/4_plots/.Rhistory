load(file = paste0(dir, "statistics.Rdat"))
logF= "all_trees_rho_origin_fixTrainTrees_nn_combined.log"
posterior_fixTestTrees_10scarringRates = read.delim(file = paste0(dir, logF), header = T)
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
median(posterior_fixTestTrees_10scarringRates$clockRate)
median(posterior_fixTestTrees_10scarringRates$clockRate)
median(posterior_fixTestTrees$clockRate)
median(posterior_priorScarringRate$clockRate.c)
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_1.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_1.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_1.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_1.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_2.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_2.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_3.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_3.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_4.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_4.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_5.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_5.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_6.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_6.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_7.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_7.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_8.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_8.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_8.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_8.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_9.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_9.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_10.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_10.2, c(0.05, 0.5, 0.95))
quantile(posterior_fixTestTrees_10scarringRates$scarringRate_site_9.2, c(0.05, 0.5, 0.95))
quantile(posterior_priorScarringRate$scarringRate_site_9.2, c(0.05, 0.5, 0.95))
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_fixClock/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
5.5 /54
5.54
54/54
5/54
library(fitdistrplus)
library(boot)
allbarcodesFile = "~/Projects/trees-in-devBio/data/intMemoirData/Figure 2I/allBarcodes.csv"
allbarcodes = read.csv(allbarcodesFile)
5/54
5/54/10
5/54/10
library(ape)
library(ggplot2)
library(reshape2)
# get posterior
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/"
subdirs = c("all_trees_rho_origin_reparScarClock_clockPerTree/",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior/",
"all_trees_rho_origin_reparScarClock_relaxedClockPerTree_independentPrior/",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior_independentBD/",
"all_trees_rho_origin_reparScarClock_independentTrees/",
"all_trees_rho_origin_reparScarClock_independentTrees_independentScarringRates/",
"all_trees_rho_origin_reparScarClock_fixTrainTrees/",
"all_trees_rho_origin_reparScarClock_fixTrainTrees/",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock/",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate/",
"all_trees_rho_origin_reparScarClock_treeInit25_fixScarringRates/",
"all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI/")
#_originVaries/"
logFiles = c("all_trees_rho_origin_reparScarClock_clockPerTree_combined.log",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior_M-5S1_combined.log",
"all_trees_rho_origin_reparScarClock_relaxedClockPerTree_independentPrior_M-5S1_combined.log",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior_independentBD_combined.log",
"all_trees_rho_origin_reparScarClock_independentTrees_combined.log",
"all_trees_rho_origin_reparScarClock_independentTrees_independentScarringRates_combined.log",
"all_trees_rho_origin_fixTrainTrees_nn_combined.log",
"all_trees_rho_origin_fixTrainTrees_nn_1scarringRate_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_fixScarringRatesS_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI_combined.log")
analysisNr = 10
subdirs[analysisNr]
analysisNr = 9
subdirs[analysisNr]
posterior = read.csv(paste0(dir, subdirs[analysisNr], logFiles[analysisNr]), sep = "\t")
# get true trees
trueTreeDir =  "~/Projects/trees-in-devBio/results/intMemoir/trueTrees/trueTreesCenteredNodeHeights/manualCorrection/"
trueTreeFiles = list.files(trueTreeDir, pattern = "data.newick")
n = length(trueTreeFiles)
#get preprocessed data
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/merged_input_to_xml.Rdat")
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/treeDat.Rdat")
digitsToRound = 2
# create summary statistics
statistics = data.frame(trueHeight = rep(0, n), HPD_lower = rep(0,n), median = rep(0,n),
HPD_upper = rep(0,n), recovered = rep(F,n), colony=rep("", n),
clockLower=rep(0.0,n), medClock = rep(0.0,n), clockUpper=rep(0.0,n))
for (i in 1:n){
#get true height
trueTreeFile = trueTreeFiles[i]
trueTree = read.tree(paste0(trueTreeDir, trueTreeFile))
trueHeight = round(max(node.depth.edgelength(trueTree)), digits = digitsToRound)
#get inferred height
dataName = strsplit(x = trueTreeFile, split = ".", fixed = T)[[1]][1]
statistics[i, "colony"] = dataName
colName = paste0("treeHeight.t_", dataName, ".txt")
treeHeightPosterior = posterior[, colName]
treeHeightHPD95  = round(quantile(treeHeightPosterior, c(0.05, 0.5, 0.95)), digits = digitsToRound)
#save in summary data frame
statistics[i, 1:4 ] = c(trueHeight, treeHeightHPD95)
if (trueHeight <= treeHeightHPD95[3] & trueHeight >= treeHeightHPD95[1]){
statistics[i, "recovered"] = T
}
#add clock rate
#colName = paste0("clockRate_", dataName, ".txt")
#clockPosterior = posterior[, colName]
#clockHPD = quantile(clockPosterior, c(0.05, 0.5, 0.95))
#statistics[i, c("clockLower", "medClock", "clockUpper" )] = clockHPD
}
print(sum(statistics$recovered)/nrow(statistics))
statistics = statistics[order(statistics$trueHeight), ]
statistics$treeNumber = 1:93
# rm stats for train set
testSet = statistics[which(statistics$trueHeight != statistics$HPD_upper), ]
print(sum(testSet$recovered)/nrow(testSet))
save(statistics, file = paste0(dir, subdirs[analysisNr], "statistics.Rdat"))
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_fixClock/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
plot_posterior(mergedStats = mergedStats, "darkgreen")
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/treeDat.Rdat")
library(reshape2)
plot_posterior = function(mergedStats, colName="darkgreen"){
darkgreen="darkgreen"
melted = melt(mergedStats, id.vars = "treeNumber")
g = ggplot(mergedStats, aes(x=treeNumber, y=median)) +
geom_point()+
geom_errorbar(aes(ymin=HPD_lower, ymax=HPD_upper), alpha=0.4) +
geom_point(aes_string(y="trueHeight", col=colName))+ theme_minimal()+
xlab("tree number") + ylab("Posterior intervals of the tree height")+
ylim(0,55)+
scale_x_discrete("colonies", labels  = statistics$colony_id)+
scale_color_brewer(type = "div")+
theme(axis.text.x = element_text(angle = 45))
return(g)
}
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_originVaries/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
mergedStats$diffSlope = mergedStats$lmSlope - 0.009
mergedStats$diffHeight = mergedStats$trueHeight - mergedStats$median
mergedStats = mergedStats[order(mergedStats$diffHeight), ]
mergedStats$treeNumber = 1:93
clockPrior1 = rlnorm(n = 10000, meanlog = -5, sdlog = 1)
clock1HPD = quantile(clockPrior1, c(0.05, 0.5, 0.95))
clockPrior2 = rlnorm(n = 10000, meanlog = -5, sdlog = 4)
clock2HPD = quantile(clockPrior2, c(0.05, 0.5, 0.95))
mergedStats[94, ] = list("prior1clock", NA, NA, NA, NA, NA, clock1HPD[1], clock1HPD[2], clock1HPD[3], 94, NA, NA, NA, NA, NA, NA, NA, NA,NA)
mergedStats[95, ] = list("prior1clockPerTree", NA, NA, NA, NA, NA, clock2HPD[1], clock2HPD[2], clock2HPD[3], 94, NA, NA, NA, NA, NA, NA, NA, NA,NA)
plot_posterior(mergedStats, "diffSlope")
mergedStats = mergedStats[order(mergedStats$diffSlope), ]
mergedStats$treeNumber = 1:95
plot_posterior(mergedStats, "diffHeight")
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_fixClock/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
0.009 + 0.09
(0.009 + 0.09)/2
View(mergedStats)
ggplot(mergedStats$lmSlope, mergedStats$trueHeight)
ggplot(aes(mergedStats$lmSlope, mergedStats$trueHeight))
ggplot(mergedStats, aes(x=lmSlope, y=trueHeight))
ggplot(mergedStats, aes(x=lmSlope, y=trueHeight))+
geom_point()
cor_lm_height = cor(mergedStats$trueHeight, mergedStats$lmSlope)
cor_lm_height
cor_lm_height = cor(mergedStats$trueHeight, mergedStats$lmSlope)
ggplot(mergedStats, aes(x=lmSlope, y=trueHeight))+
geom_point()
View(mergedStats)
ggplot(mergedStats, aes(x=median, y=dist))+
geom_point()
cor_height = cor(mergedStats$median, mergedStats$dist)
ggplot(mergedStats, aes(x=median, y=dist))+
geom_point()
library(ggplot)
library(ggplot2)
ggplot(mergedStats, aes(x=median, y=dist))+
geom_point()
ggplot(mergedStats, aes(x=median, y=dist))+
geom_point()+
ggtitle(label = "o", subtitle = paste(round(cor_height, digits = 2)))
cor_height = cor(mergedStats$treeHeight, mergedStats$dist)
ggplot(mergedStats, aes(x=treeHeight, y=dist))+
geom_point()+
ggtitle(label = "o", subtitle = paste(round(cor_height, digits = 2)))
?treedist
??treedist
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
plot_posterior(mergedStats = mergedStats, "darkgreen")
library(reshape2)
plot_posterior(mergedStats = mergedStats, "darkgreen")
library(phangorn)
library(ape)
library(ggplot2)
library(reshape2)
# get posterior
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/"
subdirs = c("all_trees_rho_origin_reparScarClock_clockPerTree/",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior/",
"all_trees_rho_origin_reparScarClock_relaxedClockPerTree_independentPrior/",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior_independentBD/",
"all_trees_rho_origin_reparScarClock_independentTrees/",
"all_trees_rho_origin_reparScarClock_independentTrees_independentScarringRates/",
"all_trees_rho_origin_reparScarClock_fixTrainTrees/",
"all_trees_rho_origin_reparScarClock_fixTrainTrees/",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock/",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate/",
"all_trees_rho_origin_reparScarClock_treeInit25_fixScarringRates/",
"all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI/")
#_originVaries/"
logFiles = c("all_trees_rho_origin_reparScarClock_clockPerTree_combined.log",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior_M-5S1_combined.log",
"all_trees_rho_origin_reparScarClock_relaxedClockPerTree_independentPrior_M-5S1_combined.log",
"all_trees_rho_origin_reparScarClock_clockPerTree_independentPrior_independentBD_combined.log",
"all_trees_rho_origin_reparScarClock_independentTrees_combined.log",
"all_trees_rho_origin_reparScarClock_independentTrees_independentScarringRates_combined.log",
"all_trees_rho_origin_fixTrainTrees_nn_combined.log",
"all_trees_rho_origin_fixTrainTrees_nn_1scarringRate_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_fixScarringRatesS_combined.log",
"all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI_combined.log")
analysisNr = 10
posterior = read.csv(paste0(dir, subdirs[analysisNr], logFiles[analysisNr]), sep = "\t")
# get true trees
trueTreeDir =  "~/Projects/trees-in-devBio/results/intMemoir/trueTrees/trueTreesCenteredNodeHeights/manualCorrection/"
trueTreeFiles = list.files(trueTreeDir, pattern = "data.newick")
n = length(trueTreeFiles)
#get preprocessed data
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/merged_input_to_xml.Rdat")
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/treeDat.Rdat")
digitsToRound = 2
# create summary statistics
statistics = data.frame(trueHeight = rep(0, n), HPD_lower = rep(0,n), median = rep(0,n),
HPD_upper = rep(0,n), recovered = rep(F,n), colony=rep("", n),
clockLower=rep(0.0,n), medClock = rep(0.0,n), clockUpper=rep(0.0,n))
for (i in 1:n){
#get true height
trueTreeFile = trueTreeFiles[i]
trueTree = read.tree(paste0(trueTreeDir, trueTreeFile))
trueHeight = round(max(node.depth.edgelength(trueTree)), digits = digitsToRound)
#get inferred height
dataName = strsplit(x = trueTreeFile, split = ".", fixed = T)[[1]][1]
statistics[i, "colony"] = dataName
colName = paste0("treeHeight.t_", dataName, ".txt")
treeHeightPosterior = posterior[, colName]
treeHeightHPD95  = round(quantile(treeHeightPosterior, c(0.05, 0.5, 0.95)), digits = digitsToRound)
#save in summary data frame
statistics[i, 1:4 ] = c(trueHeight, treeHeightHPD95)
if (trueHeight <= treeHeightHPD95[3] & trueHeight >= treeHeightHPD95[1]){
statistics[i, "recovered"] = T
}
#add clock rate
#colName = paste0("clockRate_", dataName, ".txt")
#clockPosterior = posterior[, colName]
#clockHPD = quantile(clockPosterior, c(0.05, 0.5, 0.95))
#statistics[i, c("clockLower", "medClock", "clockUpper" )] = clockHPD
}
print(sum(statistics$recovered)/nrow(statistics))
statistics = statistics[order(statistics$trueHeight), ]
statistics$treeNumber = 1:93
# rm stats for train set
testSet = statistics[which(statistics$trueHeight != statistics$HPD_upper), ]
print(sum(testSet$recovered)/nrow(testSet))
save(statistics, file = paste0(dir, subdirs[analysisNr], "statistics.Rdat"))
library(ggridges)
library(ggplot2)
library(reshape2)
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/branchDat_trueTrees.Rdat")
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/treeDat.Rdat")
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/alignmentDat_trueTrees.Rdat")
plotDir = "~/Projects/trees-in-devBio/results/intMemoir/plots/temporalSignal"
load(file = "~/Projects/trees-in-devBio/code/intMemoir_analysis/data_processing/treeDat.Rdat")
library(reshape2)
plot_posterior = function(mergedStats, colName="darkgreen"){
darkgreen="darkgreen"
melted = melt(mergedStats, id.vars = "treeNumber")
g = ggplot(mergedStats, aes(x=treeNumber, y=median)) +
geom_point()+
geom_errorbar(aes(ymin=HPD_lower, ymax=HPD_upper), alpha=0.4) +
geom_point(aes_string(y="trueHeight", col=colName))+ theme_minimal()+
xlab("tree number") + ylab("Posterior intervals of the tree height")+
ylim(0,55)+
scale_x_discrete("colonies", labels  = statistics$colony_id)+
scale_color_brewer(type = "div")+
theme(axis.text.x = element_text(angle = 45))
return(g)
}
library(ggplot2)
dir = "~/Projects/trees-in-devBio/results/intMemoir/inference/all_trees_rho_origin_reparScarClock_treeInit25_fixClock_fixScarringRate/"
load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = statistics, dat, by="colony" )
plot_posterior(mergedStats = mergedStats, "darkgreen")
print(sum(statistics$recovered)/nrow(statistics))
statistics = statistics[order(statistics$trueHeight), ]
statistics$treeNumber = 1:93
# rm stats for train set
testSet = statistics[which(statistics$trueHeight != statistics$HPD_upper), ]
print(sum(testSet$recovered)/nrow(testSet))
source("tree_scripts.R")
getwd()
setwd(dir = "../../../trees-in-devBio/papers/bayesianPhylogeneticInference/Figures/Fig3/3_analysis/")
source("tree_scripts.R")
# Convert the mcc trees from nexus into newick files, s.t. TreeCmp can process them
intmemdir = "../2_inference/inference_logs/"
subdirs = c("priorInfoOnScarring/", "unsupervised/")
subdirIdx = 2
intmemdir = paste0(intmemdir, subdirs[subdirIdx])
files = list.files(intmemdir, pattern = "mcc.tree")
for (nexusFile in files){
print(nexusFile)
filename_without_extension = strsplit(x = nexusFile, split = ".tree$")[[1]][1]
newickFile = paste0(filename_without_extension, ".newick")
print(newickFile)
convert_nexus_to_newick(nexusFile = paste0(intmemdir, nexusFile),
newickFile = paste0(intmemdir, newickFile))
}
# run TreeCmp
newickFiles = list.files(path = intmemdir, pattern = "*.newick")
trueTreeDir = "../dat/trueTrees/"
scoreDir = paste0("../2_inference/treecmpScores/",
subdirs[subdirIdx])
for (newickFile in newickFiles){
colonyName = strsplit(newickFile, split = ".", fixed = T)[[1]][3]
dreamChallengeRange = grepl(pattern = "dreamChallengeRange", x = newickFile)
trueTreeFile = paste0(trueTreeDir, colonyName, ".newick")
command = "java -jar /Users/seidels/frameworks/TreeCmp/bin/TreeCmp.jar"
if (dreamChallengeRange){
args = paste0("-P -N -I -d 'rc' 'tt' -r ",  trueTreeFile,
" -i ", paste0(intmemdir, newickFile),
" -o ", paste0(scoreDir, "treecmp_score_dreamChallengeRange_", colonyName, ".txt"))
}else{
args = paste0("-P -N -I -d 'rc' 'tt' -r ",  trueTreeFile,
" -i ", paste0(intmemdir, newickFile),
" -o ", paste0(scoreDir, "treecmp_score_", colonyName, ".txt"))
}
system(command = paste(command, args))
}
library(ggplot2)
library(reshape2)
width = 8
height = 8
# plotting setup
plotDir = "."
font = "Arial"
#useful functions
recovered = function(true, upper, lower){
return( (true <= upper) & (true >= lower))
}
#useful functions
recovered = function(true, upper, lower){
return( (true <= upper) & (true >= lower))
}
# true tree data
load(file = "../1_preprocessing/treeDat.Rdat")
# load inference data from setup where scarring start varies
logFile = "../2_inference/inference_logs/priorInfoOnScarring/all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI_scarringStart_clock_ExpPriorScarringStart_combined.log"
log = read.delim(logFile)
# compute posterior stats for tree heights
treeHeightDat = log[, startsWith(x = colnames(log), prefix = "treeHeight")]
colonies = as.character(sapply(colnames(treeHeightDat), function(x){ strsplit(x, split = "treeHeight.t_", fixed = T)[[1]][2]}))
summaryStats = as.data.frame(t(apply(treeHeightDat, MARGIN = 2, function(x){quantile(x, c(0.05, 0.5, 0.95))})))
colnames(summaryStats) = c("HPD_lower", "median", "HPD_upper")
summaryStats$colony = colonies
#load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = summaryStats, dat, by="colony" )
# coverage
rec = recovered(true = mergedStats$treeHeight, lower=mergedStats$HPD_lower, upper = mergedStats$HPD_upper)
coverage = round(sum(rec)/length(rec), digits =2)
coverage
# coverage with hour resolution
rec = recovered(true = mergedStats$treeHeight,
lower = round(mergedStats$HPD_lower, digits = 0),
upper = round(mergedStats$HPD_upper, digits = 0))
coverage = round(sum(rec)/length(rec), digits =2)
coverage
#plot
mergedStats = mergedStats[order(mergedStats$treeHeight), ]
mergedStats$treeNumber=1:nrow(mergedStats)
g = ggplot(mergedStats, aes(x=treeNumber, y=median)) +
geom_point()+
geom_errorbar(aes(ymin=HPD_lower, ymax=HPD_upper), alpha=0.4) +
geom_point(aes(y=treeHeight), col="darkgreen")+
theme_minimal()+
xlab("Colony number") +
ylab("Estimated tree height | median and HPD ")+
ylim(0,55)+
theme(axis.title = element_text(size=20), text = element_text(size = 15, family =font))
#scale_x_discrete("colonies", labels  = statistics$colony_id)+
g
svg(filename = paste0(plotDir, "treeheight.svg"),
width = width,
height = height, family = font)
g
dev.off()
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(wesanderson)
# plot config
plotDir = "./"
mycolors = rep(wes_palette(n=4, name="GrandBudapest1")[c(1,2,4)], each=2)
width = 8
height = 8
unit = "cm"
font = "Arial"
#load posterior
logF = "../2_inference/inference_logs/priorInfoOnScarring/all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI_scarringStart_clock_ExpPriorScarringStart_combined.log"
posterior = read.delim(file = paste0(logF), header = T)
print("report posterior median and 95% HPD interval for the birth rate:")
round(quantile(posterior$birthRate, c(0.05, 0.5, 0.95)), digits = 3)
print("report posterior median and 95% HPD interval for the death rate:")
round(quantile(posterior$deathRate, c(0.05, 0.5, 0.95)), digits = 3)
n = nrow(posterior)
posterior$growthRate = posterior$birthRate - posterior$deathRate
posterior$turnover = posterior$deathRate/ posterior$birthRate
# add prior distr data points
set.seed(6)
#posterior$birthPrior = rlnorm(n = n, meanlog = 0, sdlog = 0.6)
#posterior$deathPrior = rlnorm(n=n, meanlog = -2, sdlog = 1.4)
posterior$growthPrior = runif(n = n, 0, 0.1)
posterior$turnoverPrior = runif(n = n, 0, 1)
#plot
dat = melt(posterior[, c("growthPrior", "growthRate", "turnoverPrior", "turnover", "birthRate", "deathRate")])
g = ggplot(dat, aes(x=variable, y=value, fill=variable, dist="lnorm")) +
geom_violin(draw_quantiles = c(0.05, 0.95))+
scale_fill_manual(values = mycolors) +
#ylim(0,0.4)+
theme_classic() +
xlab("")+
theme(legend.position = "none")+
ylab("density")+
theme(text=element_text(size = 20, family = font),
axis.text.x = element_text(angle = 45, vjust = 0.7, hjust = 0.65, ))
g
#save
svg(paste0(plotDir, "phylodynamicEstimates.svg"), family = font)
g
dev.off()
ls
getPWD
??getpwd
getwd ()
setwd("../4_plots/")
# plot config
plotDir = "./"
#save
svg(paste0(plotDir, "phylodynamicEstimates.svg"), family = font)
g
dev.off()
# true tree data
load(file = "../1_preprocessing/treeDat.Rdat")
# load inference data from setup where scarring start varies
logFile = "../2_inference/inference_logs/priorInfoOnScarring/all_trees_rho_origin_reparScarClock_treeInit25_PriorOnScarringRatesI_scarringStart_clock_ExpPriorScarringStart_combined.log"
log = read.delim(logFile)
colonies = as.character(sapply(colnames(treeHeightDat), function(x){ strsplit(x, split = "treeHeight.t_", fixed = T)[[1]][2]}))
summaryStats = as.data.frame(t(apply(treeHeightDat, MARGIN = 2, function(x){quantile(x, c(0.05, 0.5, 0.95))})))
colnames(summaryStats) = c("HPD_lower", "median", "HPD_upper")
summaryStats$colony = colonies
# coverage
rec = recovered(true = mergedStats$treeHeight, lower=mergedStats$HPD_lower, upper = mergedStats$HPD_upper)
# compute posterior stats for tree heights
treeHeightDat = log[, startsWith(x = colnames(log), prefix = "treeHeight")]
coverage = round(sum(rec)/length(rec), digits =2)
#load(file = paste0(dir, "statistics.Rdat"))
mergedStats = merge(x = summaryStats, dat, by="colony" )
coverage
# coverage with hour resolution
rec = recovered(true = mergedStats$treeHeight,
lower = round(mergedStats$HPD_lower, digits = 0),
upper = round(mergedStats$HPD_upper, digits = 0))
coverage = round(sum(rec)/length(rec), digits =2)
coverage
#plot
mergedStats = mergedStats[order(mergedStats$treeHeight), ]
mergedStats$treeNumber=1:nrow(mergedStats)
g = ggplot(mergedStats, aes(x=treeNumber, y=median)) +
geom_point()+
geom_errorbar(aes(ymin=HPD_lower, ymax=HPD_upper), alpha=0.4) +
geom_point(aes(y=treeHeight), col="darkgreen")+
theme_minimal()+
xlab("Colony number") +
ylab("Estimated tree height | median and HPD ")+
ylim(0,55)+
theme(axis.title = element_text(size=20), text = element_text(size = 15, family =font))
#scale_x_discrete("colonies", labels  = statistics$colony_id)+
g
svg(filename = paste0(plotDir, "treeheight.svg"),
width = width,
height = height, family = font)
g
dev.off()
